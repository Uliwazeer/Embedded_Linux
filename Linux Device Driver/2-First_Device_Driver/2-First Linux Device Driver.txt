Module Information

1-License
2-Author
3-Module Description
4-Module Version
These pieces of information are present in the Linux/module.h as macros.
**************************************************************************
The following license idents are currently accepted as indicating free software modules.

"GPL" [GNU Public License v2 or later]

"GPL v2" [GNU Public License v2]

"GPL and additional rights" [GNU Public License v2 rights and more]

"Dual BSD/GPL" [GNU Public License v2 or BSD license choice]

"Dual MIT/GPL" [GNU Public License v2 or MIT license choice]

"Dual MPL/GPL" [GNU Public License v2 or Mozilla license choice]
modinfo can show license info for users wanting to vet their setup is free
**************************************************************************
We can give the License for our Linux device driver (module) like below. For this, you need to include the Linux/module.h header file.
MODULE_LICENSE("GPL");
MODULE_LICENSE("GPL v2");
MODULE_LICENSE("Dual BSD/GPL");
ملحوظة: هذا ليس ضروريًا تمامًا، ولكن يجب أن تحدد وحدتك الترخيص الذي ينطبق على الكود الخاص بها.
**************************************************************************
Author

MODULE_AUTHOR("Author");
**************************************************************************
Module Description

MODULE_DESCRIPTION("A sample driver");
**************************************************************************
Module Version
Using this Macro we can give the version of the module or driver. So, modinfo can show the module version for users wanting to know.

Version of form [<epoch>:]<version>[-<extra-version>].

<epoch>: A (small) unsigned integer which allows you to start versions anew. If not mentioned, it’s zero. eg. “2:1.0” is after “1:2.0”.

<version>: The <version> may contain only alphanumerics and the character `.’. Ordered by numeric sort for numeric parts, ASCII sort for ASCII parts (as per RPM or DEB algorithm).

<extraversion>: Like <version>, but inserted for local customizations, eg “rh3” or “rusty1”.
MODULE_VERSION("2:1.0");
**************************************************************************
A Kernel Module is a small file that may be loaded into the running Kernel and unloaded.

Loading
To load a Kernel Module, use the insmod command with root privileges.

For example, our module file name is hello_world_module.ko

sudo insmod hello_world_module.ko
lsmod used to see the modules were inserted. In the below image, I’ve shown the prints in the init function. Use dmesg to see the kernel prints.

Listing the Modules
In order to see the list of currently loaded modules, use the lsmod command. In the above image, you can see that I have used lsmod command.

Unloading
To un-load, a Kernel module, use the rmmod command with root privileges.

Getting Module Details
In order to get information about a Module (author, supported options), we may use the modinfo command.

For example

modinfo hello_world_module.ko
**************************************************************************
/***************************************************************************//**
*  \file       driver.c
*
*  \details    Simple hello world driver
*
*  \author     Ali Wazeer
*
* *******************************************************************************/
#include<linux/kernel.h>
#include<linux/init.h>
#include<linux/module.h>
 
/*
** Module Init function
*/
static int __init hello_world_init(void)
{
    printk(KERN_INFO "Welcome to EmbeTronicX\n");
    printk(KERN_INFO "This is the Simple Module\n");
    printk(KERN_INFO "Kernel Module Inserted Successfully...\n");
    return 0;
}

/*
** Module Exit function
*/
static void __exit hello_world_exit(void)
{
    printk(KERN_INFO "Kernel Module Removed Successfully...\n");
}
 
module_init(hello_world_init);
module_exit(hello_world_exit);
 
MODULE_LICENSE("GPL");
MODULE_AUTHOR("Ali Wazeer <ali.weazeer2000@gmail.com>");
MODULE_DESCRIPTION("A simple hello world driver");
MODULE_VERSION("2:1.0");
**************************************************************************

