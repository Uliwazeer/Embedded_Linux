Introduction – Misc Device Driver
Misc driver is the miscellaneous driver for miscellaneous devices. We can say that misc drivers are special and simple character drivers. You can write this misc driver when you cannot classify your peripheral.

This means that if you don’t want to use the major number, then you can write this misc driver. Also, if you want to write a simple driver, then you can choose a misc driver instead of choosing a character driver.

So, you cannot choose the major number yourself when you write the misc driver. The default major number of all the misc drivers is 10. But you can choose your minor numbers between 1 to 255. It has all the file operation calls like open, read, write, close, and IOCTL.

This will create the device file under /dev/{your_misc_file}. It is almost like the character driver. Isn’t it? Then why the hell we are using the misc devices, and what is the difference between misc drivers and character drivers? Let’s continue reading.
**************************************************************************
Difference between Character Driver and Misc Driver
In misc driver, the major number will be 10 and the minor number is user-convenient. Whereas, in character drivers, the user can select their own major and minor number if it is available.
The device node or device file will be automatically generated in misc drivers. Whereas, in character drivers, the user has to create the device node or device file using cdev_init, cdev_add, class_create, and device_create.
**************************************************************************
Uses of Linux Misc Drivers
If you write character drivers for simple devices, you have to create a major number as well. In such a case, the kernel has to keep that details in the static table. This means you end up wasting the RAM for simple devices. If you write multiple character drivers for multiple simple devices, then the RAM wastage also increases. To avoid this you can use the misc driver. Because, in the misc driver, you don’t need to specify the major number since it has a fixed major number which is 10.
If you use misc drivers, it will automatically create the device file compared to the character driver.
**************************************************************************
Misc Device Driver API
In order to create misc drivers, we need to use miscdevice structure, file operations. After that, we need to register the device. Once we have done with the operation, then we can unregister the device.

The following APIs are used to create and delete the misc device. You need to insert the header file include<linux/miscdevice.h>.

Misc Device Structure
Character drivers have cdevstructure to know the driver’s functions and other calls. Like that, the misc driver also has a separate structure to maintain the details. The structure is as follows,

struct miscdevice {
  int minor;
  const char *name;
  struct file_operations *fops;
  struct miscdevice *next, *prev;
};
Where,

<minor>: You can assign your custom minor number to this. If you pass MISC_DYNAMIC_MINOR to this variable, then the misc driver will automatically generate the minor number and assign it to this variable. Every misc driver needs to have a different minor number since this is the only link between the device file and the driver. Recommended is a dynamic method to allocate the minor number instead of assigning the same minor number to the different misc devices. If you want to select your own minor number then check for the used minor number of all misc devices using ls -l /dev/, and then you can hardcode your minor number if it is available.

<name>: you can assign the name of the misc driver. The device file will be created in this name and displayed under the /dev directory.

<fops>: This is the pointer to the file operations. This is the same file operation in character drivers.

<next> and <prev>: These are used to manage the circular linked list of misc drivers.

Once you loaded the misc driver, you can see the major and minor numbers of your misc device driver using ls -l /dev/{misc_driver_name}. Please see the example below.

Register the misc Device
This API is used to register the misc device with the kernel.

int misc_registerstruct miscdevice * misc)
where,

<misc>: device structure to be registered

return: A zero is returned on success and a negative errno code for failure.

You have to call this function in init function. The structure passed is linked to the kernel and may not be destroyed until it has been unregistered.

This one function will avoid the below functions used in the character device driver while registering the device.

alloc_chrdev_region(); – used for the major and minor number
cdev_init(); – used to initialize cdev
cdev_add(); – used to  add the cdev structure to the device
class_create();  – used to create a class
device_create();  – used to create a device
That’s why we are saying this is the simple method.

Example:
static const struct file_operations fops = {
    .owner          = THIS_MODULE,
    .write          = etx_misc_write,
    .read           = etx_misc_read,
    .open           = etx_misc_open,
    .release        = etx_misc_close,
    .llseek         = no_llseek,
};
struct miscdevice etx_misc_device = {
    .minor = MISC_DYNAMIC_MINOR,
    .name = "simple_etx_misc",
    .fops = &fops,
};
static int __init misc_init(void)
{
    int error;
    error = misc_register(&etx_misc_device);
    if (error) {
        pr_err("misc_register failed!!!\n");
        return error;
    }
    pr_info("misc_register init done!!!\n");
    return 0;
}
Unregister the Misc Device
This API is used to un-register the misc device with the kernel.

misc_deregister(struct miscdevice * misc)
where,

<misc>: device structure to be un-registered

Unregister a miscellaneous device that was previously successfully registered with misc_register(). This has to be called in __exit function.

This one function will avoid the below functions used in the character device driver while unregistering the device.

cdev_del(); – used to delete cdev
unregister_chrdev_region();  – used to remove the major and minor number
device_destroy();  – used to delete the device
class_destroy(); – used to delete the class
Example:
static void __exit misc_exit(void)
{
    misc_deregister(&etx_misc_device);
    pr_info("misc_register exit done1!!!\n");
}
**************************************************************************